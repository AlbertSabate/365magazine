# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: RootQuery
}

"A Sanity document"
interface Document {
  "Date the document was created"
  _createdAt: DateTime
  "Document ID"
  _id: ID
  "Current document revision"
  _rev: String
  "Document type"
  _type: String
  "Date the document was last modified"
  _updatedAt: DateTime
}

union BlockOrImageSimple = Block | ImageSimple

union BlockOrImageSimpleOrRecipeStep = Block | ImageSimple | RecipeStep

union PostOrRecipe = Post | Recipe

type Author implements Document {
  "Date the document was created"
  _createdAt: DateTime
  "Document ID"
  _id: ID
  _key: String
  "Current document revision"
  _rev: String
  "Document type"
  _type: String
  "Date the document was last modified"
  _updatedAt: DateTime
  bioRaw: JSON
  image: ImageSimple
  instagram: String
  name: String
  slug: Slug
  title: String
  website: String
}

type AuthorLink {
  _key: String
  _type: String
  addFeature: Boolean
  who: Author
}

type Block {
  _key: String
  _type: String
  children: [Span]
  list: String
  style: String
}

type Category implements Document {
  "Date the document was created"
  _createdAt: DateTime
  "Document ID"
  _id: ID
  _key: String
  "Current document revision"
  _rev: String
  "Document type"
  _type: String
  "Date the document was last modified"
  _updatedAt: DateTime
  description: String
  title: String
}

type File {
  _key: String
  _type: String
  asset: SanityFileAsset
}

type Geopoint {
  _key: String
  _type: String
  alt: Float
  lat: Float
  lng: Float
}

type Image {
  _key: String
  _type: String
  asset: SanityImageAsset
  crop: SanityImageCrop
  hotspot: SanityImageHotspot
}

type ImageSimple {
  _key: String
  _type: String
  "Important for SEO and accessibility."
  alt: String
  asset: SanityImageAsset
  captionRaw: JSON
  crop: SanityImageCrop
  hotspot: SanityImageHotspot
}

type LandingConfig implements Document {
  "Date the document was created"
  _createdAt: DateTime
  "Document ID"
  _id: ID
  _key: String
  "Current document revision"
  _rev: String
  "Document type"
  _type: String
  "Date the document was last modified"
  _updatedAt: DateTime
  mainFeature: PostOrRecipe
}

type Post implements Document {
  "Date the document was created"
  _createdAt: DateTime
  "Document ID"
  _id: ID
  _key: String
  "Current document revision"
  _rev: String
  "Document type"
  _type: String
  "Date the document was last modified"
  _updatedAt: DateTime
  author: AuthorLink
  categories: [Category]
  contentRaw: JSON
  mainImage: ImageSimple
  publishedAt: DateTime
  slug: Slug
  tagline: String
  tags: [Tag]
  title: String
}

type Recipe implements Document {
  "Date the document was created"
  _createdAt: DateTime
  "Document ID"
  _id: ID
  _key: String
  "Current document revision"
  _rev: String
  "Document type"
  _type: String
  "Date the document was last modified"
  _updatedAt: DateTime
  author: AuthorLink
  categories: [Category]
  contentRaw: JSON
  mainImage: ImageSimple
  publishedAt: DateTime
  recipeInfo: RecipeInfo
  slug: Slug
  tagline: String
  tags: [Tag]
  title: String
}

type RecipeInfo {
  _key: String
  _type: String
  cookingTime: String
  ingredients: [RecipeIngredient]
  makes: String
  serves: String
}

type RecipeIngredient {
  _key: String
  _type: String
  amount: String
  ingredient: String
  note: String
}

type RecipeStep {
  _key: String
  _type: String
  contentRaw: JSON
  step: Float
}

type RootQuery {
  Author(
    "Author document ID"
    id: ID!
  ): Author
  Category(
    "Category document ID"
    id: ID!
  ): Category
  Document(
    "Document document ID"
    id: ID!
  ): Document
  LandingConfig(
    "LandingConfig document ID"
    id: ID!
  ): LandingConfig
  Post(
    "Post document ID"
    id: ID!
  ): Post
  Recipe(
    "Recipe document ID"
    id: ID!
  ): Recipe
  SanityFileAsset(
    "SanityFileAsset document ID"
    id: ID!
  ): SanityFileAsset
  SanityImageAsset(
    "SanityImageAsset document ID"
    id: ID!
  ): SanityImageAsset
  SiteConfig(
    "SiteConfig document ID"
    id: ID!
  ): SiteConfig
  Tag(
    "Tag document ID"
    id: ID!
  ): Tag
  allAuthor(
    "Max documents to return"
    limit: Int,
    "Offset at which to start returning documents from"
    offset: Int,
    sort: [AuthorSorting!],
    where: AuthorFilter
  ): [Author!]!
  allCategory(
    "Max documents to return"
    limit: Int,
    "Offset at which to start returning documents from"
    offset: Int,
    sort: [CategorySorting!],
    where: CategoryFilter
  ): [Category!]!
  allDocument(
    "Max documents to return"
    limit: Int,
    "Offset at which to start returning documents from"
    offset: Int,
    sort: [DocumentSorting!],
    where: DocumentFilter
  ): [Document!]!
  allLandingConfig(
    "Max documents to return"
    limit: Int,
    "Offset at which to start returning documents from"
    offset: Int,
    sort: [LandingConfigSorting!],
    where: LandingConfigFilter
  ): [LandingConfig!]!
  allPost(
    "Max documents to return"
    limit: Int,
    "Offset at which to start returning documents from"
    offset: Int,
    sort: [PostSorting!],
    where: PostFilter
  ): [Post!]!
  allRecipe(
    "Max documents to return"
    limit: Int,
    "Offset at which to start returning documents from"
    offset: Int,
    sort: [RecipeSorting!],
    where: RecipeFilter
  ): [Recipe!]!
  allSanityFileAsset(
    "Max documents to return"
    limit: Int,
    "Offset at which to start returning documents from"
    offset: Int,
    sort: [SanityFileAssetSorting!],
    where: SanityFileAssetFilter
  ): [SanityFileAsset!]!
  allSanityImageAsset(
    "Max documents to return"
    limit: Int,
    "Offset at which to start returning documents from"
    offset: Int,
    sort: [SanityImageAssetSorting!],
    where: SanityImageAssetFilter
  ): [SanityImageAsset!]!
  allSiteConfig(
    "Max documents to return"
    limit: Int,
    "Offset at which to start returning documents from"
    offset: Int,
    sort: [SiteConfigSorting!],
    where: SiteConfigFilter
  ): [SiteConfig!]!
  allTag(
    "Max documents to return"
    limit: Int,
    "Offset at which to start returning documents from"
    offset: Int,
    sort: [TagSorting!],
    where: TagFilter
  ): [Tag!]!
}

type SanityAssetSourceData {
  _key: String
  _type: String
  "The unique ID for the asset within the originating source so you can programatically find back to it"
  id: String
  "A canonical name for the source this asset is originating from"
  name: String
  "A URL to find more information about this asset in the originating source"
  url: String
}

type SanityFileAsset implements Document {
  "Date the document was created"
  _createdAt: DateTime
  "Document ID"
  _id: ID
  _key: String
  "Current document revision"
  _rev: String
  "Document type"
  _type: String
  "Date the document was last modified"
  _updatedAt: DateTime
  altText: String
  assetId: String
  description: String
  extension: String
  label: String
  mimeType: String
  originalFilename: String
  path: String
  sha1hash: String
  size: Float
  source: SanityAssetSourceData
  title: String
  url: String
}

type SanityImageAsset implements Document {
  "Date the document was created"
  _createdAt: DateTime
  "Document ID"
  _id: ID
  _key: String
  "Current document revision"
  _rev: String
  "Document type"
  _type: String
  "Date the document was last modified"
  _updatedAt: DateTime
  altText: String
  assetId: String
  description: String
  extension: String
  label: String
  metadata: SanityImageMetadata
  mimeType: String
  originalFilename: String
  path: String
  sha1hash: String
  size: Float
  source: SanityAssetSourceData
  title: String
  url: String
}

type SanityImageCrop {
  _key: String
  _type: String
  bottom: Float
  left: Float
  right: Float
  top: Float
}

type SanityImageDimensions {
  _key: String
  _type: String
  aspectRatio: Float
  height: Float
  width: Float
}

type SanityImageHotspot {
  _key: String
  _type: String
  height: Float
  width: Float
  x: Float
  y: Float
}

type SanityImageMetadata {
  _key: String
  _type: String
  dimensions: SanityImageDimensions
  hasAlpha: Boolean
  isOpaque: Boolean
  location: Geopoint
  lqip: String
  palette: SanityImagePalette
}

type SanityImagePalette {
  _key: String
  _type: String
  darkMuted: SanityImagePaletteSwatch
  darkVibrant: SanityImagePaletteSwatch
  dominant: SanityImagePaletteSwatch
  lightMuted: SanityImagePaletteSwatch
  lightVibrant: SanityImagePaletteSwatch
  muted: SanityImagePaletteSwatch
  vibrant: SanityImagePaletteSwatch
}

type SanityImagePaletteSwatch {
  _key: String
  _type: String
  background: String
  foreground: String
  population: Float
  title: String
}

type SiteConfig implements Document {
  "Date the document was created"
  _createdAt: DateTime
  "Document ID"
  _id: ID
  _key: String
  "Current document revision"
  _rev: String
  "Document type"
  _type: String
  "Date the document was last modified"
  _updatedAt: DateTime
  description: String
  title: String
}

type Slug {
  _key: String
  _type: String
  current: String
}

type Span {
  _key: String
  _type: String
  marks: [String]
  text: String
}

type Tag implements Document {
  "Date the document was created"
  _createdAt: DateTime
  "Document ID"
  _id: ID
  _key: String
  "Current document revision"
  _rev: String
  "Document type"
  _type: String
  "Date the document was last modified"
  _updatedAt: DateTime
  description: String
  title: String
}

enum SortOrder {
  "Sorts on the value in ascending order."
  ASC
  "Sorts on the value in descending order."
  DESC
}

input AuthorFilter {
  "Apply filters on document level"
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  image: ImageSimpleFilter
  instagram: StringFilter
  name: StringFilter
  slug: SlugFilter
  title: StringFilter
  website: StringFilter
}

input AuthorLinkFilter {
  _key: StringFilter
  _type: StringFilter
  addFeature: BooleanFilter
  who: AuthorFilter
}

input AuthorLinkSorting {
  _key: SortOrder
  _type: SortOrder
  addFeature: SortOrder
}

input AuthorSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  image: ImageSimpleSorting
  instagram: SortOrder
  name: SortOrder
  slug: SlugSorting
  title: SortOrder
  website: SortOrder
}

input BooleanFilter {
  "Checks if the value is equal to the given input."
  eq: Boolean
  "Checks if the value is not equal to the given input."
  neq: Boolean
}

input CategoryFilter {
  "Apply filters on document level"
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  description: StringFilter
  title: StringFilter
}

input CategorySorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  description: SortOrder
  title: SortOrder
}

input DateFilter {
  "Checks if the value is equal to the given input."
  eq: Date
  "Checks if the value is greater than the given input."
  gt: Date
  "Checks if the value is greater than or equal to the given input."
  gte: Date
  "Checks if the value is lesser than the given input."
  lt: Date
  "Checks if the value is lesser than or equal to the given input."
  lte: Date
  "Checks if the value is not equal to the given input."
  neq: Date
}

input DatetimeFilter {
  "Checks if the value is equal to the given input."
  eq: DateTime
  "Checks if the value is greater than the given input."
  gt: DateTime
  "Checks if the value is greater than or equal to the given input."
  gte: DateTime
  "Checks if the value is lesser than the given input."
  lt: DateTime
  "Checks if the value is lesser than or equal to the given input."
  lte: DateTime
  "Checks if the value is not equal to the given input."
  neq: DateTime
}

input DocumentFilter {
  "Apply filters on document level"
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
}

input DocumentSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
}

input FileFilter {
  _key: StringFilter
  _type: StringFilter
  asset: SanityFileAssetFilter
}

input FileSorting {
  _key: SortOrder
  _type: SortOrder
}

input FloatFilter {
  "Checks if the value is equal to the given input."
  eq: Float
  "Checks if the value is greater than the given input."
  gt: Float
  "Checks if the value is greater than or equal to the given input."
  gte: Float
  "Checks if the value is lesser than the given input."
  lt: Float
  "Checks if the value is lesser than or equal to the given input."
  lte: Float
  "Checks if the value is not equal to the given input."
  neq: Float
}

input GeopointFilter {
  _key: StringFilter
  _type: StringFilter
  alt: FloatFilter
  lat: FloatFilter
  lng: FloatFilter
}

input GeopointSorting {
  _key: SortOrder
  _type: SortOrder
  alt: SortOrder
  lat: SortOrder
  lng: SortOrder
}

input IDFilter {
  "Checks if the value is equal to the given input."
  eq: ID
  in: [ID!]
  "Checks if the value matches the given word/words."
  matches: ID
  "Checks if the value is not equal to the given input."
  neq: ID
  nin: [ID!]
}

input ImageFilter {
  _key: StringFilter
  _type: StringFilter
  asset: SanityImageAssetFilter
  crop: SanityImageCropFilter
  hotspot: SanityImageHotspotFilter
}

input ImageSimpleFilter {
  _key: StringFilter
  _type: StringFilter
  alt: StringFilter
  asset: SanityImageAssetFilter
  crop: SanityImageCropFilter
  hotspot: SanityImageHotspotFilter
}

input ImageSimpleSorting {
  _key: SortOrder
  _type: SortOrder
  alt: SortOrder
  crop: SanityImageCropSorting
  hotspot: SanityImageHotspotSorting
}

input ImageSorting {
  _key: SortOrder
  _type: SortOrder
  crop: SanityImageCropSorting
  hotspot: SanityImageHotspotSorting
}

input IntFilter {
  "Checks if the value is equal to the given input."
  eq: Int
  "Checks if the value is greater than the given input."
  gt: Int
  "Checks if the value is greater than or equal to the given input."
  gte: Int
  "Checks if the value is lesser than the given input."
  lt: Int
  "Checks if the value is lesser than or equal to the given input."
  lte: Int
  "Checks if the value is not equal to the given input."
  neq: Int
}

input LandingConfigFilter {
  "Apply filters on document level"
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
}

input LandingConfigSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
}

input PostFilter {
  "Apply filters on document level"
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  author: AuthorLinkFilter
  mainImage: ImageSimpleFilter
  publishedAt: DatetimeFilter
  slug: SlugFilter
  tagline: StringFilter
  title: StringFilter
}

input PostSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  author: AuthorLinkSorting
  mainImage: ImageSimpleSorting
  publishedAt: SortOrder
  slug: SlugSorting
  tagline: SortOrder
  title: SortOrder
}

input RecipeFilter {
  "Apply filters on document level"
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  author: AuthorLinkFilter
  mainImage: ImageSimpleFilter
  publishedAt: DatetimeFilter
  recipeInfo: RecipeInfoFilter
  slug: SlugFilter
  tagline: StringFilter
  title: StringFilter
}

input RecipeInfoFilter {
  _key: StringFilter
  _type: StringFilter
  cookingTime: StringFilter
  makes: StringFilter
  serves: StringFilter
}

input RecipeInfoSorting {
  _key: SortOrder
  _type: SortOrder
  cookingTime: SortOrder
  makes: SortOrder
  serves: SortOrder
}

input RecipeIngredientFilter {
  _key: StringFilter
  _type: StringFilter
  amount: StringFilter
  ingredient: StringFilter
  note: StringFilter
}

input RecipeIngredientSorting {
  _key: SortOrder
  _type: SortOrder
  amount: SortOrder
  ingredient: SortOrder
  note: SortOrder
}

input RecipeSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  author: AuthorLinkSorting
  mainImage: ImageSimpleSorting
  publishedAt: SortOrder
  recipeInfo: RecipeInfoSorting
  slug: SlugSorting
  tagline: SortOrder
  title: SortOrder
}

input RecipeStepFilter {
  _key: StringFilter
  _type: StringFilter
  step: FloatFilter
}

input RecipeStepSorting {
  _key: SortOrder
  _type: SortOrder
  step: SortOrder
}

input SanityAssetSourceDataFilter {
  _key: StringFilter
  _type: StringFilter
  id: StringFilter
  name: StringFilter
  url: StringFilter
}

input SanityAssetSourceDataSorting {
  _key: SortOrder
  _type: SortOrder
  id: SortOrder
  name: SortOrder
  url: SortOrder
}

input SanityFileAssetFilter {
  "Apply filters on document level"
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  altText: StringFilter
  assetId: StringFilter
  description: StringFilter
  extension: StringFilter
  label: StringFilter
  mimeType: StringFilter
  originalFilename: StringFilter
  path: StringFilter
  sha1hash: StringFilter
  size: FloatFilter
  source: SanityAssetSourceDataFilter
  title: StringFilter
  url: StringFilter
}

input SanityFileAssetSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  altText: SortOrder
  assetId: SortOrder
  description: SortOrder
  extension: SortOrder
  label: SortOrder
  mimeType: SortOrder
  originalFilename: SortOrder
  path: SortOrder
  sha1hash: SortOrder
  size: SortOrder
  source: SanityAssetSourceDataSorting
  title: SortOrder
  url: SortOrder
}

input SanityImageAssetFilter {
  "Apply filters on document level"
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  altText: StringFilter
  assetId: StringFilter
  description: StringFilter
  extension: StringFilter
  label: StringFilter
  metadata: SanityImageMetadataFilter
  mimeType: StringFilter
  originalFilename: StringFilter
  path: StringFilter
  sha1hash: StringFilter
  size: FloatFilter
  source: SanityAssetSourceDataFilter
  title: StringFilter
  url: StringFilter
}

input SanityImageAssetSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  altText: SortOrder
  assetId: SortOrder
  description: SortOrder
  extension: SortOrder
  label: SortOrder
  metadata: SanityImageMetadataSorting
  mimeType: SortOrder
  originalFilename: SortOrder
  path: SortOrder
  sha1hash: SortOrder
  size: SortOrder
  source: SanityAssetSourceDataSorting
  title: SortOrder
  url: SortOrder
}

input SanityImageCropFilter {
  _key: StringFilter
  _type: StringFilter
  bottom: FloatFilter
  left: FloatFilter
  right: FloatFilter
  top: FloatFilter
}

input SanityImageCropSorting {
  _key: SortOrder
  _type: SortOrder
  bottom: SortOrder
  left: SortOrder
  right: SortOrder
  top: SortOrder
}

input SanityImageDimensionsFilter {
  _key: StringFilter
  _type: StringFilter
  aspectRatio: FloatFilter
  height: FloatFilter
  width: FloatFilter
}

input SanityImageDimensionsSorting {
  _key: SortOrder
  _type: SortOrder
  aspectRatio: SortOrder
  height: SortOrder
  width: SortOrder
}

input SanityImageHotspotFilter {
  _key: StringFilter
  _type: StringFilter
  height: FloatFilter
  width: FloatFilter
  x: FloatFilter
  y: FloatFilter
}

input SanityImageHotspotSorting {
  _key: SortOrder
  _type: SortOrder
  height: SortOrder
  width: SortOrder
  x: SortOrder
  y: SortOrder
}

input SanityImageMetadataFilter {
  _key: StringFilter
  _type: StringFilter
  dimensions: SanityImageDimensionsFilter
  hasAlpha: BooleanFilter
  isOpaque: BooleanFilter
  location: GeopointFilter
  lqip: StringFilter
  palette: SanityImagePaletteFilter
}

input SanityImageMetadataSorting {
  _key: SortOrder
  _type: SortOrder
  dimensions: SanityImageDimensionsSorting
  hasAlpha: SortOrder
  isOpaque: SortOrder
  location: GeopointSorting
  lqip: SortOrder
  palette: SanityImagePaletteSorting
}

input SanityImagePaletteFilter {
  _key: StringFilter
  _type: StringFilter
  darkMuted: SanityImagePaletteSwatchFilter
  darkVibrant: SanityImagePaletteSwatchFilter
  dominant: SanityImagePaletteSwatchFilter
  lightMuted: SanityImagePaletteSwatchFilter
  lightVibrant: SanityImagePaletteSwatchFilter
  muted: SanityImagePaletteSwatchFilter
  vibrant: SanityImagePaletteSwatchFilter
}

input SanityImagePaletteSorting {
  _key: SortOrder
  _type: SortOrder
  darkMuted: SanityImagePaletteSwatchSorting
  darkVibrant: SanityImagePaletteSwatchSorting
  dominant: SanityImagePaletteSwatchSorting
  lightMuted: SanityImagePaletteSwatchSorting
  lightVibrant: SanityImagePaletteSwatchSorting
  muted: SanityImagePaletteSwatchSorting
  vibrant: SanityImagePaletteSwatchSorting
}

input SanityImagePaletteSwatchFilter {
  _key: StringFilter
  _type: StringFilter
  background: StringFilter
  foreground: StringFilter
  population: FloatFilter
  title: StringFilter
}

input SanityImagePaletteSwatchSorting {
  _key: SortOrder
  _type: SortOrder
  background: SortOrder
  foreground: SortOrder
  population: SortOrder
  title: SortOrder
}

input Sanity_DocumentFilter {
  "All documents that are drafts."
  is_draft: Boolean
  "All documents referencing the given document ID."
  references: ID
}

input SiteConfigFilter {
  "Apply filters on document level"
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  description: StringFilter
  title: StringFilter
}

input SiteConfigSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  description: SortOrder
  title: SortOrder
}

input SlugFilter {
  _key: StringFilter
  _type: StringFilter
  current: StringFilter
}

input SlugSorting {
  _key: SortOrder
  _type: SortOrder
  current: SortOrder
}

input StringFilter {
  "Checks if the value is equal to the given input."
  eq: String
  in: [String!]
  "Checks if the value matches the given word/words."
  matches: String
  "Checks if the value is not equal to the given input."
  neq: String
  nin: [String!]
}

input TagFilter {
  "Apply filters on document level"
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  description: StringFilter
  title: StringFilter
}

input TagSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  description: SortOrder
  title: SortOrder
}


"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date
